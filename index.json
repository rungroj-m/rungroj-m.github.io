[{"authors":null,"categories":null,"content":"I am a Ph.D. student in the Software Engineering Laboratory at Nara Institute of Science and Technology. My research interest consists of studies on text classification, such as self-admitted technical debt and sentiment classification. My other side project is a study on Blockchain. My research collaborates with Prof. Christoph Treude, Prof. Michele Lanza, Prof. Gabriele Bavota, and Prof. Hideaki Hata.\n","date":1607817600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1607817600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"I am a Ph.D. student in the Software Engineering Laboratory at Nara Institute of Science and Technology. My research interest consists of studies on text classification, such as self-admitted technical debt and sentiment classification.","tags":null,"title":"Rungroj MAIPRADIT","type":"authors"},{"authors":["Saranphon Phaithoon","Supakarn Wongnil","Patiphol Pussawong","Morakot Choetkiertikul","Chaiyong Ragkhitwetsagul","Thanwadee Sunetnanta","Rungroj Maipradit","Hideaki Hata","Kenichi Matsumoto"],"categories":null,"content":"","date":1630972800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1630972800,"objectID":"c2dc9a5b0e9e348ba3acad72ccc12301","permalink":"https://rungroj-m.github.io/publication/fixme/","publishdate":"2021-09-07T00:00:00Z","relpermalink":"/publication/fixme/","section":"publication","summary":"Self-Admitted Technical Debt (SATD) is a special form of technical debt in which developers intentionally record their hacks in the code by adding comments for attention. Here, we focus on issue-related \"On-hold SATD\", where developers suspend proper implementation due to issues reported inside or outside the project. When the referenced issues are resolved, the On-hold SATD also need to be addressed, but since monitoring these issue reports takes a lot of time and effort, developers may not be aware of the resolved issues and leave the On-hold SATD in the code. In this paper, we propose FixMe, a GitHub bot that helps developers detecting and monitoring On-hold SATD in their repositories and notify them whenever the On-hold SATDs are ready to be fixed (i.e. the referenced issues are resolved). The bot can automatically detect On-hold SATD comments from source code using machine learning techniques and discover referenced issues. When the referenced issues are resolved, developers will be notified by FixMe bot. The evaluation conducted with 11 participants shows that our FixMe bot can support them in dealing with On-hold SATD. FixMe is available at https://www.fixmebot.app/ and FixMe's VDO is at https://youtu.be/YSz9kFxN_YQ.","tags":null,"title":"FixMe: A GitHub Bot for Detecting and Monitoring On-Hold Self-Admitted Technical Debt","type":"publication"},{"authors":null,"categories":null,"content":"","date":1630944057,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1630944057,"objectID":"0a38ddbe90c1348b33bca723b9d1e72a","permalink":"https://rungroj-m.github.io/talk/wait-for-it-identifying-on-holdself-admitted-technical-debt/","publishdate":"2021-10-26T07:09:57.868Z","relpermalink":"/talk/wait-for-it-identifying-on-holdself-admitted-technical-debt/","section":"event","summary":"This paper reports on the results of a qualitative study on the removal of self-admitted technical debt (SATD), and reveals a particular class of self-admitted technical debt which is amenable to automated management: ``on-hold SATD''. We define on-hold SATD as self-admitted technical debt which contains a condition to indicate that a developer is waiting for a certain event or an updated functionality having been implemented elsewhere. We then design and evaluate an automated classifier which can identify these on-hold instances with an area under the receiver operating characteristic curve (AUC) of 0.98 as well as detect the specific conditions that developers are waiting for.","tags":null,"title":"Wait For It: Identifying ‚ÄúOn-Hold‚ÄùSelf-Admitted Technical Debt","type":"event"},{"authors":[],"categories":null,"content":"","date":1621958443,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1621958443,"objectID":"90da4dd83677e1905bb86a5be57cebea","permalink":"https://rungroj-m.github.io/talk/wait-for-it-identifying-on-holdself-admitted-technical-debt/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/wait-for-it-identifying-on-holdself-admitted-technical-debt/","section":"event","summary":"This paper reports on the results of a qualitative study on the removal of self-admitted technical debt (SATD), and reveals a particular class of self-admitted technical debt which is amenable to automated management: ``on-hold SATD''. We define on-hold SATD as self-admitted technical debt which contains a condition to indicate that a developer is waiting for a certain event or an updated functionality having been implemented elsewhere. We then design and evaluate an automated classifier which can identify these on-hold instances with an area under the receiver operating characteristic curve (AUC) of 0.98 as well as detect the specific conditions that developers are waiting for.","tags":[],"title":"Wait For It: Identifying \"On-Hold\"Self-Admitted Technical Debt","type":"event"},{"authors":["Rungroj MAIPRADIT","Âê≥ÊÅ©ÈÅî"],"categories":["Demo","ÊïôÁ®ã"],"content":"Overview  The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site The template can be modified and customised to suit your needs. It‚Äôs a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a no-code solution (write in Markdown and customize with YAML parameters) and having flexibility to later add even deeper personalization with HTML and CSS You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more    The template is mobile first with a responsive design to ensure that your site looks stunning on every device.  Get Started  üëâ Create a new site üìö Personalize your site üí¨ Chat with the Wowchemy community or Hugo community üê¶ Twitter: @wowchemy @GeorgeCushen #MadeWithWowchemy üí° Request a feature or report a bug for Wowchemy ‚¨ÜÔ∏è Updating Wowchemy? View the Update Tutorial and Release Notes  Crowd-funded open-source software To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.\n‚ù§Ô∏è Click here to become a sponsor and help support Wowchemy‚Äôs future ‚ù§Ô∏è As a token of appreciation for sponsoring, you can unlock these awesome rewards and extra features ü¶Ñ‚ú®\nEcosystem  Hugo Academic CLI: Automatically import publications from BibTeX  Inspiration Check out the latest demo of what you‚Äôll get in less than 10 minutes, or view the showcase of personal, project, and business sites.\nFeatures  Page builder - Create anything with widgets and elements Edit any type of content - Blog posts, publications, talks, slides, projects, and more! Create content in Markdown, Jupyter, or RStudio Plugin System - Fully customizable color and font themes Display Code and Math - Code highlighting and LaTeX math supported Integrations - Google Analytics, Disqus commenting, Maps, Contact Forms, and more! Beautiful Site - Simple and refreshing one page design Industry-Leading SEO - Help get your website found on search engines and social media Media Galleries - Display your images and videos with captions in a customizable gallery Mobile Friendly - Look amazing on every screen with a mobile friendly version of your site Multi-language - 34+ language packs including English, ‰∏≠Êñá, and Portugu√™s Multi-user - Each author gets their own profile page Privacy Pack - Assists with GDPR Stand Out - Bring your site to life with animation, parallax backgrounds, and scroll effects One-Click Deployment - No servers. No databases. Only files.  Themes Wowchemy and its templates come with automatic day (light) and night (dark) mode built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the Demo to see it in action! Day/night mode can also be disabled by the site admin in params.toml.\nChoose a stunning theme and font for your site. Themes are fully customizable.\nLicense Copyright 2016-present George Cushen.\nReleased under the MIT license.\n","date":1607817600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1607817600,"objectID":"279b9966ca9cf3121ce924dca452bb1c","permalink":"https://rungroj-m.github.io/post/getting-started/","publishdate":"2020-12-13T00:00:00Z","relpermalink":"/post/getting-started/","section":"post","summary":"Welcome üëã We know that first impressions are important, so we've populated your new site with some initial content to help you get familiar with everything in no time.","tags":["Academic","ÂºÄÊ∫ê"],"title":"Welcome to Wowchemy, the website builder for Hugo","type":"post"},{"authors":["Rungroj Maipradit","Christoph Treude","Hideaki Hata","Kenichi Matsumoto"],"categories":null,"content":"","date":1599264e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1599264e3,"objectID":"958b6eff8d66a2b4ab5dc465f1bc0b09","permalink":"https://rungroj-m.github.io/publication/wait-for-it-identifying-on-hold-self-admitted-technical-debt/","publishdate":"2020-09-05T00:00:00Z","relpermalink":"/publication/wait-for-it-identifying-on-hold-self-admitted-technical-debt/","section":"publication","summary":"Self-admitted technical debt refers to situations where a software developer knows that their current implementation is not optimal and indicates this using a source code comment. In this work, we hypothesize that it is possible to develop automated techniques to understand a subset of these comments in more detail, and to propose tool support that can help developers manage self-admitted technical debt more effectively. Based on a qualitative study of 333 comments indicating self-admitted technical debt, we first identify one particular class of debt amenable to automated management: on-hold self-admitted technical debt (on-hold SATD), i.e., debt which contains a condition to indicate that a developer is waiting for a certain event or an updated functionality having been implemented elsewhere. We then design and evaluate an automated classifier which can identify these on-hold instances with an area under the receiver operating characteristic curve (AUC) of 0.98 as well as detect the specific conditions that developers are waiting for. Our work presents a first step towards automated tool support that is able to indicate when certain instances of self-admitted technical debt are ready to be addressed.","tags":null,"title":"Wait for it: identifying ‚ÄúOn-Hold‚Äù self-admitted technical debt","type":"publication"},{"authors":["Rungroj Maipradit","Bin Lin","Csaba Nagy","Gabriele Bavota","Michele Lanza","Hideaki Hata","Kenichi Matsumoto"],"categories":null,"content":"","date":1598918400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598918400,"objectID":"d55742ccbcf7c45f1952a7350b12e096","permalink":"https://rungroj-m.github.io/publication/automated-identification-of-on-hold-self-admitted-technical-debt/","publishdate":"2020-09-01T00:00:00Z","relpermalink":"/publication/automated-identification-of-on-hold-self-admitted-technical-debt/","section":"publication","summary":"Modern software is developed under considerable time pressure, which implies that developers more often than not have to resort to compromises when it comes to code that is well written and code that just does the job. This has led over the past decades to the concept of ‚Äútechnical debt‚Äù, a short-term hack that potentially generates long-term maintenance problems. Self-admitted technical debt (SATD) is a particular form of technical debt: developers consciously perform the hack but also document it in the code by adding comments as a reminder (or as an admission of guilt). We focus on a specific type of SATD, namely ‚ÄúOn-hold‚Äù SATD, in which developers document in their comments the need to halt an implementation task due to conditions outside of their scope of work (e.g., an open issue must be closed before a function can be implemented).We present an approach, based on regular expressions and machine learning, which is able to detect issues referenced in code comments, and to automatically classify the detected instances as either ‚ÄúOn-hold‚Äù (the issue is referenced to indicate the need to wait for its resolution before completing a task), or as ‚Äúcross-reference‚Äù, (the issue is referenced to document the code, for example to explain the rationale behind an implementation choice). Our approach also mines the issue tracker of the projects to check if the On-hold SATD instances are ‚Äúsuperfluous‚Äù and can be removed (i.e., the referenced issue has been closed, but the SATD is still in the code). Our evaluation confirms that our approach can indeed identify relevant instances of On-hold SATD. We illustrate its usefulness by identifying superfluous On-hold SATD instances in open source projects as confirmed by the original developers.\n","tags":null,"title":"Automated identification of on-hold self-admitted technical debt","type":"publication"},{"authors":["Rungroj Maipradit","Hideaki Hata","Kenichi Matsumoto"],"categories":null,"content":"","date":1559088e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559088e3,"objectID":"5b04034295439203978bc25a8f81cf2e","permalink":"https://rungroj-m.github.io/publication/sentiment-classification-using-n-gram-inverse-document-frequency-and-automated-machine-learning/","publishdate":"2019-05-29T00:00:00Z","relpermalink":"/publication/sentiment-classification-using-n-gram-inverse-document-frequency-and-automated-machine-learning/","section":"publication","summary":"We propose a sentiment classification method with a general machine-learning framework. In comparison to publicly available data sets, our method achieved the highest F1 values in positive and negative sentences on all data sets.\n","tags":null,"title":"Sentiment Classification Using N-Gram Inverse Document Frequency and Automated Machine Learning","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}   Custom CSS Example Let‚Äôs make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://rungroj-m.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Supatsara Wattanakriengkrai","Rungroj Maipradit","Hideki Hata","Morakot Choetkiertikul","Thanwadee Sunetnanta","Kenichi Matsumoto"],"categories":null,"content":"","date":1543881600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543881600,"objectID":"5f54f426d4f26cdf7eac4969713826e4","permalink":"https://rungroj-m.github.io/publication/identifying-design-and-requirement-self-admitted-technical-debt-using-n-gram-idf/","publishdate":"2018-12-04T00:00:00Z","relpermalink":"/publication/identifying-design-and-requirement-self-admitted-technical-debt-using-n-gram-idf/","section":"publication","summary":"In software projects, technical debt takes place when a developer adopting a trivial solution containing quick and easy shortcuts to implement over a suitable solution that can take a longer time to solve a problem. This can cause major additional costs leading to negative impacts for software maintenance since those shortcuts might need to be reworked in the future. Detecting technical debt early can help a team cope with those risks. In this paper, we focus on Self-Admitted Technical Debt (SATD) that is a debt intentionally produced by developers. We propose an automated model to identify two most common types of self-admitted technical debt, requirement and design debt, from source code comments. We combine N-gram IDF and auto-sklearn machine learning to build the model. With the empirical evaluation on ten projects, our approach outperform the baseline method by improving the performance over 20% when identifying requirement self-admitted technical debt and achieving an average F1-score of 64% when identifying design self-admitted technical debt.\n","tags":null,"title":"Identifying design and requirement self-admitted technical debt using n-gram idf","type":"publication"},{"authors":["Daiki Takata","Abdulaziz Alhefdhi","Maipradit Rungroj","Hideaki Hata","Hoa Khanh Dam","Takashi Ishio","Kenichi Matsumoto"],"categories":null,"content":"","date":1537833600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1537833600,"objectID":"f7a013b82364e68bdb7462ebd3b4ba3c","permalink":"https://rungroj-m.github.io/publication/catalogen-generating-catalogs-of-code-examples-collected-from-oss/","publishdate":"2018-09-25T00:00:00Z","relpermalink":"/publication/catalogen-generating-catalogs-of-code-examples-collected-from-oss/","section":"publication","summary":"Given a Java class name as a query, Catalogen generates a catalog of code examples collected from open source software projects. A set of code examples are categorized based on the similarity of N-gram features in code, and automatically generated comments are attached to all code examples.\n","tags":null,"title":"Catalogen: Generating catalogs of code examples collected from oss","type":"publication"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"f26b5133c34eec1aa0a09390a36c2ade","permalink":"https://rungroj-m.github.io/admin/config.yml","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/admin/config.yml","section":"","summary":"","tags":null,"title":"","type":"wowchemycms"}]